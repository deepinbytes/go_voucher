package app

import (
	"fmt"
	"github.com/deepinbytes/go_voucher/domain/offer"
	"github.com/deepinbytes/go_voucher/domain/voucher"
	"github.com/deepinbytes/go_voucher/repositories/offerrepo"
	"github.com/deepinbytes/go_voucher/repositories/voucherrepo"
	"log"
	"net/http"

	"github.com/deepinbytes/go_voucher/configs"
	"github.com/deepinbytes/go_voucher/domain/user"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
	"github.com/joho/godotenv"

	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	_ "github.com/deepinbytes/go_voucher/docs" // docs is generated by Swag CLI

	"github.com/deepinbytes/go_voucher/controllers"
	"github.com/deepinbytes/go_voucher/repositories/userrepo"
	"github.com/deepinbytes/go_voucher/services/offerservice"
	"github.com/deepinbytes/go_voucher/services/userservice"
	"github.com/deepinbytes/go_voucher/services/voucherservice"
	_ "github.com/lib/pq" // For Postgres setup
)

var (
	router = gin.Default()
)

// @host localhost:3000
// @BasePath /

// @securityDefinitions.apikey ApiKeyAuth
// @in header
// @name Authorization

func Run() {
	/*
		====== Swagger setup ============
		(http://localhost:3000/swagger/index.html)
	*/
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	/*
		====== Setup configs ============
	*/
	if err := godotenv.Load(); err != nil {
		log.Fatal("Error loading .env file")
	}
	config := configs.GetConfig()

	// Connects to PostgresDB
	db, err := gorm.Open(
		config.Postgres.Dialect(),
		config.Postgres.GetPostgresConnectionInfo(),
	)
	if err != nil {
		panic(err)
	}

	// Migration
	// db.DropTableIfExists(&user.User{})
	db.AutoMigrate(&user.User{}, &offer.Offer{}, &voucher.Voucher{})
	defer db.Close()

	/*
		====== Setup repositories =======
	*/
	userRepo := userrepo.NewUserRepo(db)
	voucherRepo := voucherrepo.NewVoucherRepo(db)
	offerRepo := offerrepo.NewOfferRepo(db)

	/*
		====== Setup services ===========
	*/
	userService := userservice.NewUserService(userRepo)
	voucherService := voucherservice.NewVoucherService(voucherRepo)
	offerService := offerservice.NewOfferService(offerRepo)

	/*
		====== Setup controllers ========
	*/
	userCtl := controllers.NewUserController(userService)
	voucherCtl := controllers.NewVoucherController(voucherService, userService, offerService)
	offerCtl := controllers.NewOfferController(offerService, userService, voucherService)

	/*
		====== Setup middlewares ========
	*/
	router.Use(gin.Logger())
	router.Use(gin.Recovery())

	/*
		====== Setup routes =============
	*/
	router.GET("/ping", func(c *gin.Context) { c.String(http.StatusOK, "pong") })

	api := router.Group("/api")

	api.GET("/offer/:id", offerCtl.GetByID)
	api.POST("/offer/create", offerCtl.Create)
	api.POST("/offer/update", offerCtl.Update)
	api.POST("/offer/generate_vouchers", offerCtl.GenerateVouchers)

	api.GET("/voucher/:id", voucherCtl.GetByID)
	api.POST("/voucher/create", voucherCtl.Create)
	api.POST("/voucher/redeem", voucherCtl.Redeem)

	api.POST("/register", userCtl.Register)
	api.GET("/list_users", userCtl.ListUsers)

	user := api.Group("/user")
	//user.GET("/:id", userCtl.GetByID)
	user.GET("/:email", userCtl.GetByEmail)

	// Run
	// port := fmt.Sprintf(":%s", viper.Get("APP_PORT"))
	port := fmt.Sprintf(":%s", config.Port)
	router.Run(port)
}
